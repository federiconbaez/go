version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: notebook-postgres
    environment:
      POSTGRES_DB: notebook
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server-go/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notebook-network

  # Servidor gRPC en Go
  notebook-server:
    build:
      context: ./server-go
      dockerfile: Dockerfile
    container_name: notebook-server
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: notebook
      DB_SSL_MODE: disable
      GRPC_PORT: 50051
      LOG_LEVEL: info
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - notebook-network
    restart: unless-stopped

  # Redis para cache y sesiones (opcional)
  redis:
    image: redis:7-alpine
    container_name: notebook-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - notebook-network
    restart: unless-stopped

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: notebook-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - notebook-server
    networks:
      - notebook-network
    restart: unless-stopped

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: notebook-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - notebook-network
    restart: unless-stopped

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: notebook-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - notebook-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  notebook-network:
    driver: bridge